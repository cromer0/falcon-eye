name: Python CI

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black

    - name: Lint with Flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check formatting with Black
      run: |
        black --check .

    - name: Run tests
      run: |
        python -m unittest discover -s tests

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18' # Or a more recent LTS version

    - name: Install HTMLHint
      run: npm install -g htmlhint

    - name: Create .htmlhintrc # Add this step to ensure .htmlhintrc exists for the CI run
      run: |
        echo '{' > .htmlhintrc
        echo '  "tagname-lowercase": true,' >> .htmlhintrc
        echo '  "attr-lowercase": true,' >> .htmlhintrc
        echo '  "attr-value-double-quotes": true,' >> .htmlhintrc
        echo '  "doctype-first": true,' >> .htmlhintrc
        echo '  "tag-pair": true,' >> .htmlhintrc
        echo '  "spec-char-escape": true,' >> .htmlhintrc
        echo '  "id-unique": true,' >> .htmlhintrc
        echo '  "src-not-empty": true,' >> .htmlhintrc
        echo '  "attr-no-duplication": true,' >> .htmlhintrc
        echo '  "title-require": false' >> .htmlhintrc # Set to false as login.html might not have it
        echo '}' >> .htmlhintrc

    - name: Lint HTML with HTMLHint
      run: htmlhint templates/**/*.html static/**/*.html

    - name: Install ESLint
      run: npm install -g eslint

    - name: Lint JavaScript with ESLint
      run: eslint "static/js/**/*.js"

    - name: Install Prettier
      run: npm install -g prettier

    - name: Check Formatting with Prettier
      run: prettier --check "static/js/**/*.js" "templates/**/*.html" "static/**/*.html"

    - name: Auto format HTML/JS with Prettier and commit changes
      id: format_prettier # Give an id to this step to check its output
      run: |
        prettier --write "static/js/**/*.js" "templates/**/*.html" "static/**/*.html"
        echo "::set-output name=formatted::$(git status --porcelain | wc -l)" # Check if prettier made changes

    - name: Commit Prettier changes
      if: steps.format_prettier.outputs.formatted > 0 # Only run if prettier made changes
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "style: Auto-format HTML/JS with Prettier"
        branch: ${{ github.head_ref || github.ref_name }}
        # IMPORTANT: For this step to push changes, especially on protected branches
        # or if the default GITHUB_TOKEN permissions are restricted,
        # you might need to use a Personal Access Token (PAT) with repo write scope.
        # Store the PAT as a secret (e.g., GH_PAT) in your repository settings
        # and pass it to the action:
        # token: ${{ secrets.GH_PAT }}
        # For now, this will attempt to commit with the default token.
        # If it fails due to permissions, the above token line should be added.
